// Generated by CoffeeScript 1.4.0
(function() {
  var create_delegation, encode_weights, extendArrayWithId, filter_data, ga, getShareLink, multiSync, parse_weights, root, setupPartyList, smartSync,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  root = (window.mit = window.mit || {});

  String.prototype.repeat = function(num) {
    return new Array(num + 1).join(this);
  };

  root.facebookShare = function(link) {
    var base_url;
    ga.social('Facebook', 'share', link);
    base_url = location.href.replace(/(\/)?(index.html)?(\/)?(#.*)?$/, '');
    return FB.ui({
      display: 'popup',
      method: 'feed',
      name: 'בחירומטר',
      link: link,
      caption: 'הפעם בוחרים חכם',
      description: 'בואו תראו איזה מהמפלגות באמת עובדת בשבילכם',
      picture: 'http://oknesset.org/static/img/oknesset-logo-small.png'
    }, function() {
      return console.log('Facebook callback', this, arguments);
    });
  };

  root.twitterShare = function(link) {
    ga.social('Twitter', 'share', link);
    return window.open("https://twitter.com/share?" + $.param({
      url: link,
      text: "ראו את דירוג המפלגות שלי לבחירות"
    }), 'tweet', 'width=575,height=400,left=672,top=320,scrollbars=1');
  };

  getShareLink = function(weights) {
    var base, district, fragment;
    base = window.location.href.replace(/#.*$/, '');
    district = root.global.district ? root.global.district.id : 'x';
    fragment = "" + (encode_weights(weights));
    return base + '#' + fragment;
  };

  parse_weights = function(weights) {
    var parsed;
    if (!_.isString(weights)) {
      return;
    }
    parsed = {};
    _.each(weights.split('i'), function(item) {
      var key, value, _ref;
      _ref = item.split('x'), key = _ref[0], value = _ref[1];
      return parsed[Number(key)] = Number(value);
    });
    return parsed;
  };

  encode_weights = function(weights) {
    var key, value;
    return ((function() {
      var _results;
      _results = [];
      for (key in weights) {
        value = weights[key];
        _results.push("" + key + "x" + value);
      }
      return _results;
    })()).join('i');
  };

  ga = {
    event: function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return _gaq.push(['_trackEvent'].concat(args));
    },
    social: function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return _gaq.push(['_trackSocial'].concat(args));
    }
  };

  $.widget("mit.agendaSlider", $.extend({}, $.ui.slider.prototype, {
    _create: function() {
      this.element.append('<div class="ui-slider-back"></div>');
      this.element.append('<div class="ui-slider-mid-range"></div>');
      this.element.append('<div class="ui-slider-minus-button"></div>');
      this.element.append('<div class="ui-slider-plus-button"></div>');
      return $.ui.slider.prototype._create.apply(this);
    },
    candidate_marker_classname: "ui-slider-candidate-marker",
    setCandidateMarker: function(value) {
      var handle;
      if (!this.element.find("." + this.candidate_marker_classname).length) {
        handle = this.element.find(".ui-slider-handle");
        handle.before("<div class='" + this.candidate_marker_classname + "'></div>");
      }
      return this.element.find("." + this.candidate_marker_classname).css({
        left: value + "%"
      });
    },
    clearCandidateMarker: function() {
      return this.element.find("." + this.candidate_marker_classname).remove();
    },
    _refreshValue: function() {
      var range, value;
      $.ui.slider.prototype._refreshValue.apply(this);
      value = this.value();
      range = this.element.find(".ui-slider-mid-range");
      this.element.removeClass("minus plus");
      if (value < 0) {
        this.element.addClass("minus");
        range.css({
          left: (50 + value / 2) + "%",
          right: "50%"
        });
      }
      if (value > 0) {
        this.element.addClass("plus");
        return range.css({
          left: "50%",
          right: (50 - value / 2) + "%"
        });
      }
    }
  }));

  root.syncEx = function(options_override) {
    return function(method, model, options) {
      return Backbone.sync(method, model, _.extend({}, options, options_override));
    };
  };

  root.JSONPCachableSync = function(callback_name) {
    var collisionDict, collisionPrevention;
    collisionDict = {};
    collisionPrevention = function() {
      var callback, callback_value, index;
      callback = callback_name || 'cachable';
      callback_value = _.isFunction(callback) ? callback() : callback;
      index = collisionDict[callback_value] || 0;
      collisionDict[callback_value] = index + 1;
      if (index) {
        callback_value += "__" + index;
      }
      return callback_value;
    };
    return root.syncEx({
      cache: true,
      dataType: 'jsonp',
      jsonpCallback: collisionPrevention
    });
  };

  root.syncOptions = {
    dataType: 'jsonp',
    timeout: 20000
  };

  smartSync = function(method, model, options) {
    var getLocalCopy, localCopy, promise;
    options = _.extend({}, root.syncOptions, model.syncOptions, options);
    getLocalCopy = function() {
      var repo;
      repo = options.repo;
      repo = _.isString(repo) ? root[repo] : repo;
      if (method !== 'read' || !repo) {
        return null;
      }
      if (model instanceof Backbone.Collection) {
        return repo;
      }
      return _.where(repo.objects, {
        id: model.id
      })[0];
    };
    if (localCopy = _.clone(getLocalCopy())) {
      promise = $.Deferred();
      _.defer(function() {
        if (_.isFunction(options.success)) {
          options.success(localCopy, null);
        }
        return promise.resolve(localCopy, null);
      });
      return promise;
    }
    return (options.sync || Backbone.sync)(method, model, options);
  };

  extendArrayWithId = function() {
    var dest, dest_item, id, item, sources, src, _i, _len, _results;
    dest = arguments[0], sources = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _results = [];
    for (_i = 0, _len = sources.length; _i < _len; _i++) {
      src = sources[_i];
      _results.push((function() {
        var _j, _len1, _results1;
        _results1 = [];
        for (_j = 0, _len1 = src.length; _j < _len1; _j++) {
          item = src[_j];
          id = item.id;
          if (dest_item = _.where(dest, {
            id: id
          })[0]) {
            _results1.push(_.extend(dest_item, item));
          } else {
            _results1.push(dest.push(item));
          }
        }
        return _results1;
      })());
    }
    return _results;
  };

  multiSync = function(method, model, options) {
    var multiSyncOptions, multi_options, requests;
    multiSyncOptions = (model != null ? model.multiSync : void 0) || (options != null ? options.multiSync : void 0);
    requests = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = multiSyncOptions.length; _i < _len; _i++) {
        multi_options = multiSyncOptions[_i];
        _results.push(smartSync(method, model, _.extend({}, multi_options, {
          success: void 0,
          error: void 0
        })));
      }
      return _results;
    })();
    return $.when.apply($, requests).done(function() {
      var index, parsed, response, responses;
      responses = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      parsed = (function() {
        var _i, _len, _results;
        _results = [];
        for (index = _i = 0, _len = responses.length; _i < _len; index = ++_i) {
          response = responses[index];
          _results.push((multiSyncOptions[index].parse || model.parse)(response[0]));
        }
        return _results;
      })();
      extendArrayWithId.apply(null, parsed);
      if (_.isFunction(options.success)) {
        return options.success.apply(options, responses[0]);
      }
    }).fail(function(orig_args) {
      if (_.isFunction(options.error)) {
        return options.error.apply(options, responses[0]);
      }
    });
  };

  root.MiscModel = (function(_super) {

    __extends(MiscModel, _super);

    function MiscModel() {
      return MiscModel.__super__.constructor.apply(this, arguments);
    }

    return MiscModel;

  })(Backbone.Model);

  root.Agenda = (function(_super) {

    __extends(Agenda, _super);

    function Agenda() {
      return Agenda.__super__.constructor.apply(this, arguments);
    }

    Agenda.prototype.defaults = {
      uservalue: 0
    };

    return Agenda;

  })(Backbone.Model);

  root.Party = (function(_super) {

    __extends(Party, _super);

    function Party() {
      return Party.__super__.constructor.apply(this, arguments);
    }

    Party.prototype.defaults = {
      score: 'N/A',
      selected: false
    };

    Party.prototype.parseLinks = function(data) {
      if (data.links && _.isArray(data.links)) {
        _.each(data.links, function(link) {
          var _ref, _ref1;
          if ((link != null ? (_ref = link.title) != null ? _ref.search('פייסבוק') : void 0 : void 0) !== -1 || (link != null ? (_ref1 = link.title) != null ? _ref1.search(/facebook/i) : void 0 : void 0) !== -1) {
            return data.facebook_link_url = link.url;
          }
        });
      }
      data.facebook_link_url = data.facebook_link_url || data.CA_FACEBOOK;
      data.homepage_link_url = data.CA_WEBSITE;
      if (data.absolute_url) {
        data.oknesset_link_url = "http://oknesset.org" + data.absolute_url;
      }
      return data;
    };

    Party.prototype.parse = function(data, xhr) {
      data = Party.__super__.parse.call(this, data);
      this.parseLinks(data);
      return data;
    };

    Party.prototype.getAgendas = function() {
      var name, ret;
      ret = {};
      name = this.get('name');
      root.lists.agendas.each(function(agenda) {
        var matching_party;
        matching_party = _.filter(agenda.get('parties'), function(item) {
          return item.name === name;
        });
        if (matching_party.length === 1) {
          return ret[agenda.id] = matching_party[0].score;
        } else {
          return console.log("No party " + name + " in agenda " + (agenda.get('name')));
        }
      });
      return ret;
    };

    return Party;

  })(Backbone.Model);

  root.Candidate = (function(_super) {

    __extends(Candidate, _super);

    function Candidate() {
      return Candidate.__super__.constructor.apply(this, arguments);
    }

    Candidate.prototype.defaults = {
      score: 'N/A',
      participating: true,
      is_placeholder: false
    };

    Candidate.prototype.parseLinks = function(data) {
      if (data.links && _.isArray(data.links)) {
        _.each(data.links, function(link) {
          var _ref, _ref1, _ref2;
          if ((link != null ? (_ref = link.title) != null ? _ref.search('פייסבוק') : void 0 : void 0) !== -1 || (link != null ? (_ref1 = link.title) != null ? _ref1.search(/facebook/i) : void 0 : void 0) !== -1) {
            data.facebook_link_url = link.url;
          }
          if ((link != null ? (_ref2 = link.title) != null ? _ref2.search('הכנסת') : void 0 : void 0) !== -1) {
            return data.resume_link_url = link.url;
          }
        });
      }
      if (data.absolute_url) {
        data.oknesset_link_url = "http://oknesset.org" + data.absolute_url;
      }
      return data;
    };

    Candidate.prototype.parse = function(data, xhr) {
      data = Candidate.__super__.parse.call(this, data);
      this.parseLinks(data);
      return data;
    };

    Candidate.prototype.getAgendas = function() {
      if (!this.get('agendas')) {
        console.log("Trying to use candidate agendas before fetched", this);
        throw "Agendas not fetched yet!";
      }
      return this.get('agendas');
    };

    Candidate.prototype.initialize = function() {
      var set_default,
        _this = this;
      set_default = function(attr, val) {
        if (_this.get(attr) === void 0) {
          return _this.set(attr, val);
        }
      };
      set_default('recommendation_positive', {});
      return set_default('recommendation_negative', {});
    };

    return Candidate;

  })(Backbone.Model);

  root.Member = (function(_super) {

    __extends(Member, _super);

    function Member() {
      return Member.__super__.constructor.apply(this, arguments);
    }

    return Member;

  })(root.Candidate);

  root.Newbie = (function(_super) {

    __extends(Newbie, _super);

    function Newbie() {
      return Newbie.__super__.constructor.apply(this, arguments);
    }

    Newbie.prototype.parse = function(response, xhr) {
      var ret;
      ret = Newbie.__super__.parse.apply(this, arguments);
      if (_.isString(ret.agendas)) {
        ret.agendas = parse_weights(ret.agendas);
      }
      return ret;
    };

    return Newbie;

  })(root.Candidate);

  root.PartyDeclaration = (function(_super) {

    __extends(PartyDeclaration, _super);

    function PartyDeclaration() {
      return PartyDeclaration.__super__.constructor.apply(this, arguments);
    }

    PartyDeclaration.prototype.parseLinks = function(data) {
      if (data.links && _.isArray(data.links)) {
        _.each(data.links, function(link) {
          var _ref, _ref1;
          if ((link != null ? (_ref = link.title) != null ? _ref.search('פייסבוק') : void 0 : void 0) !== -1 || (link != null ? (_ref1 = link.title) != null ? _ref1.search(/facebook/i) : void 0 : void 0) !== -1) {
            return data.facebook_link_url = link.url;
          }
        });
      }
      data.facebook_link_url = data.facebook_link_url || data.CA_FACEBOOK;
      data.homepage_link_url = data.CA_WEBSITE;
      if (data.absolute_url) {
        data.oknesset_link_url = "http://oknesset.org" + data.absolute_url;
      }
      return data;
    };

    PartyDeclaration.prototype.parse = function(response, xhr) {
      var party, ret;
      ret = PartyDeclaration.__super__.parse.apply(this, arguments);
      if (party = root.lists.parties.where({
        name: ret.name
      })[0]) {
        ret = _.extend(party.toJSON(), ret);
      }
      return ret;
    };

    return PartyDeclaration;

  })(root.Newbie);

  root.Recommendation = (function(_super) {

    __extends(Recommendation, _super);

    function Recommendation() {
      return Recommendation.__super__.constructor.apply(this, arguments);
    }

    Recommendation.prototype.defaults = {
      url: '',
      img_url: ''
    };

    Recommendation.prototype.isSelected = function(collection, options) {
      return (collection || this.collection).getSelected((options != null ? options.attr_name : void 0) === this);
    };

    return Recommendation;

  })(Backbone.Model);

  root.SelectableCollection = (function(_super) {
    var default_attr_name;

    __extends(SelectableCollection, _super);

    function SelectableCollection() {
      return SelectableCollection.__super__.constructor.apply(this, arguments);
    }

    default_attr_name = 'selected';

    SelectableCollection.prototype.initialize = function() {
      var _this = this;
      SelectableCollection.__super__.initialize.apply(this, arguments);
      return this.on('select', function(new_model, collection, options) {
        var attr_name, info, old_model, _ref, _ref1;
        if (collection === 'all') {
          collection = _this;
        }
        if (!collection) {
          collection = new_model.collection;
        }
        if (collection !== _this) {
          return;
        }
        attr_name = (_ref = options != null ? options.attr_name : void 0) != null ? _ref : default_attr_name;
        if ((_ref1 = _this.selecteds) == null) {
          _this.selecteds = {};
        }
        old_model = _this.selecteds[attr_name];
        _this.selecteds[attr_name] = new_model;
        info = {
          attr_name: attr_name,
          new_selected: new_model
        };
        if (old_model === new_model || (options != null ? options.trigger : void 0) === false) {
          return;
        }
        if (old_model) {
          old_model.trigger('deselected', old_model, _this, info);
        }
        if (new_model) {
          new_model.trigger('selected', new_model, _this, info);
        }
        return _this.trigger('selected_change', _this, info);
      });
    };

    SelectableCollection.prototype.getSelected = function(attr_name) {
      var _ref;
      if (attr_name == null) {
        attr_name = default_attr_name;
      }
      return (_ref = this.selecteds) != null ? _ref[attr_name] : void 0;
    };

    return SelectableCollection;

  })(Backbone.Collection);

  root.PromisedCollection = (function(_super) {

    __extends(PromisedCollection, _super);

    function PromisedCollection() {
      return PromisedCollection.__super__.constructor.apply(this, arguments);
    }

    PromisedCollection.prototype.initialize = function() {
      var _this = this;
      PromisedCollection.__super__.initialize.apply(this, arguments);
      this.data_ready = $.Deferred();
      this.data_ready.promise(this);
      this.on("reset", function() {
        return _this.data_ready.resolve();
      });
      if (this.models.length) {
        return this.data_ready.resolve();
      }
    };

    return PromisedCollection;

  })(root.SelectableCollection);

  root.JSONPCollection = (function(_super) {

    __extends(JSONPCollection, _super);

    function JSONPCollection() {
      return JSONPCollection.__super__.constructor.apply(this, arguments);
    }

    JSONPCollection.prototype.sync = smartSync;

    JSONPCollection.prototype.initialize = function() {
      return JSONPCollection.__super__.initialize.apply(this, arguments);
    };

    JSONPCollection.prototype.parse = function(response, xhr) {
      var ret;
      ret = response.objects;
      _.each(ret, function(obj) {
        return obj.id = parseInt(obj.id);
      });
      return ret;
    };

    return JSONPCollection;

  })(root.PromisedCollection);

  root.PartyList = (function(_super) {

    __extends(PartyList, _super);

    function PartyList() {
      return PartyList.__super__.constructor.apply(this, arguments);
    }

    PartyList.prototype.model = root.Party;

    PartyList.prototype.multiSync = [
      {
        url: "http://www.oknesset.org/api/v2/party/",
        repo: window.mit.party,
        sync: root.JSONPCachableSync('parties')
      }, {
        repo: window.mit.party_extra,
        sync: root.JSONPCachableSync('parties_extra')
      }
    ];

    PartyList.prototype.sync = multiSync;

    PartyList.prototype.initialize = function() {
      PartyList.__super__.initialize.apply(this, arguments);
      return this.agendas_fetching = $.Deferred().resolve();
    };

    return PartyList;

  })(root.JSONPCollection);

  root.AgendaList = (function(_super) {

    __extends(AgendaList, _super);

    function AgendaList() {
      return AgendaList.__super__.constructor.apply(this, arguments);
    }

    AgendaList.prototype.model = root.Agenda;

    AgendaList.prototype.url = "http://www.oknesset.org/api/v2/agenda/?extra_fields=num_followers,image,parties";

    AgendaList.prototype.comparator = function(agenda) {
      return -agenda.get('num_followers');
    };

    AgendaList.prototype.syncOptions = {
      repo: window.mit.agenda,
      sync: root.JSONPCachableSync('agendas')
    };

    AgendaList.prototype.resetWeights = function(weights) {
      var _this = this;
      return this.done(function() {
        return _this.each(function(agenda, index) {
          var value;
          if (_.isNumber(value = weights[agenda.id])) {
            return agenda.set("uservalue", value);
          }
        });
      });
    };

    AgendaList.prototype.getWeights = function() {
      var weights,
        _this = this;
      weights = {};
      this.each(function(agenda) {
        return weights[agenda.id] = agenda.get("uservalue");
      });
      return weights;
    };

    return AgendaList;

  })(root.JSONPCollection);

  root.CandidatesList = (function(_super) {

    __extends(CandidatesList, _super);

    function CandidatesList() {
      return CandidatesList.__super__.constructor.apply(this, arguments);
    }

    CandidatesList.prototype.comparator = function(src, dst) {
      var is_placeholder, last_name;
      is_placeholder = Number(src.get('is_placeholder')) - Number(dst.get('is_placeholder'));
      if (is_placeholder !== 0) {
        return is_placeholder;
      }
      last_name = function(agenda) {
        return agenda.get('name').split(/\s+/).pop();
      };
      return last_name(src).localeCompare(last_name(dst));
    };

    return CandidatesList;

  })(root.JSONPCollection);

  root.MemberList = (function(_super) {

    __extends(MemberList, _super);

    function MemberList() {
      return MemberList.__super__.constructor.apply(this, arguments);
    }

    MemberList.prototype.model = root.Member;

    MemberList.prototype.multiSync = [
      {
        url: "http://www.oknesset.org/api/v2/member/?extra_fields=current_role_descriptions,party_name,links",
        repo: window.mit.combined_members,
        sync: root.JSONPCachableSync('members')
      }, {
        repo: window.mit.member_extra,
        sync: root.JSONPCachableSync('members_extra')
      }
    ];

    MemberList.prototype.sync = multiSync;

    MemberList.prototype.parse = function(data, xhr) {
      return _.filter(MemberList.__super__.parse.apply(this, arguments), function(obj) {
        var _ref;
        return (_ref = obj.participating) != null ? _ref : true;
      });
    };

    MemberList.prototype.fetchAgendas = function() {
      var bulkUrl, fetches, ids, no_agendas,
        _this = this;
      fetches = [];
      no_agendas = this.filter(function(model) {
        return !model.get('agendas');
      });
      if (no_agendas.length === 0) {
        this.agendas_fetching = $.Deferred().resolve();
        return;
      }
      ids = _.pluck(no_agendas, 'id');
      bulkUrl = "http://www.oknesset.org/api/v2/member-agendas/set/" + ids.join(';') + '/';
      return this.agendas_fetching = root.JSONPCachableSync('memberagendas')('read', this, {
        url: bulkUrl,
        error: function() {
          return console.log('error fetching agendas', this, arguments);
        },
        success: function(resp) {
          var agendas_to_hashmap;
          if (resp.not_found) {
            console.log('Got not_found data, aborting', resp);
            return;
          }
          agendas_to_hashmap = function(agendas) {
            var ret;
            ret = {};
            _.each(agendas, function(agenda) {
              return ret[agenda.id] = agenda.score;
            });
            return ret;
          };
          return _.each(resp.objects, function(obj, index) {
            return _this.get(ids[index]).set({
              agendas: agendas_to_hashmap(obj.agendas),
              silent: true
            });
          });
        }
      });
    };

    return MemberList;

  })(root.CandidatesList);

  root.NewbiesList = (function(_super) {

    __extends(NewbiesList, _super);

    function NewbiesList() {
      return NewbiesList.__super__.constructor.apply(this, arguments);
    }

    NewbiesList.prototype.model = root.Newbie;

    NewbiesList.prototype.syncOptions = {
      disable_repo: window.mit.combined_newbies
    };

    NewbiesList.prototype.url = "http://www.mitpakdim.co.il/site/primaries/candidates_new/json.php";

    NewbiesList.prototype.fetchAgendas = function() {
      return this.agendas_fetching = $.Deferred().resolve();
    };

    return NewbiesList;

  })(root.CandidatesList);

  root.PartyDeclarationList = (function(_super) {

    __extends(PartyDeclarationList, _super);

    function PartyDeclarationList() {
      this.parse = __bind(this.parse, this);
      return PartyDeclarationList.__super__.constructor.apply(this, arguments);
    }

    PartyDeclarationList.prototype.model = root.PartyDeclaration;

    PartyDeclarationList.prototype.DECLARATION_PARTY_ID = "רשימת המפלגות";

    PartyDeclarationList.prototype.multiSync = [
      {
        url: root.NewbiesList.prototype.url,
        repo: root.NewbiesList.prototype.syncOptions.repo,
        sync: root.NewbiesList.prototype.syncOptions.sync
      }, {
        repo: window.mit.party_declarations_extra
      }
    ];

    PartyDeclarationList.prototype.sync = multiSync;

    PartyDeclarationList.prototype.parse = function(data, xhr) {
      var _this = this;
      return _.filter(PartyDeclarationList.__super__.parse.apply(this, arguments), function(obj) {
        return !(obj.party_name != null) || obj.party_name === _this.DECLARATION_PARTY_ID;
      });
    };

    PartyDeclarationList.prototype.initialize = function() {
      PartyDeclarationList.__super__.initialize.apply(this, arguments);
      return this.agendas_fetching = $.Deferred().resolve();
    };

    return PartyDeclarationList;

  })(root.NewbiesList);

  root.RecommendationList = (function(_super) {

    __extends(RecommendationList, _super);

    function RecommendationList() {
      return RecommendationList.__super__.constructor.apply(this, arguments);
    }

    RecommendationList.prototype.model = root.Recommendation;

    RecommendationList.prototype.syncOptions = {
      repo: window.mit.recommendations
    };

    RecommendationList.prototype.url = "http://www.mitpakdim.co.il/site/primaries/data/recommendations.jsonp";

    return RecommendationList;

  })(root.JSONPCollection);

  root.TemplateView = (function(_super) {

    __extends(TemplateView, _super);

    function TemplateView() {
      this.render = __bind(this.render, this);
      return TemplateView.__super__.constructor.apply(this, arguments);
    }

    TemplateView.prototype.template = function() {
      return _.template(this.get_template()).apply(null, arguments);
    };

    TemplateView.prototype.digestData = function(data) {
      return data;
    };

    TemplateView.prototype.render = function() {
      this.$el.html(this.template(this.digestData(this.model.toJSON())));
      return this;
    };

    return TemplateView;

  })(Backbone.View);

  root.ListViewItem = (function(_super) {

    __extends(ListViewItem, _super);

    function ListViewItem() {
      return ListViewItem.__super__.constructor.apply(this, arguments);
    }

    ListViewItem.prototype.tagName = "div";

    ListViewItem.prototype.get_template = function() {
      return "<a href='#'><%= name %></a>";
    };

    ListViewItem.prototype.events = {
      click: "onClick"
    };

    ListViewItem.prototype.onClick = function() {
      return this.trigger('click', this.model, this);
    };

    return ListViewItem;

  })(root.TemplateView);

  root.CandidateView = (function(_super) {

    __extends(CandidateView, _super);

    function CandidateView() {
      this.changeSelection = __bind(this.changeSelection, this);

      this.render = __bind(this.render, this);
      return CandidateView.__super__.constructor.apply(this, arguments);
    }

    CandidateView.prototype.className = "candidate_instance";

    CandidateView.prototype.initialize = function() {
      CandidateView.__super__.initialize.apply(this, arguments);
      this.model.on('change', this.render);
      this.model.on('selected', this.changeSelection);
      return this.model.on('deselected', this.changeSelection);
    };

    CandidateView.prototype.get_template = function() {
      return $("#candidate_template").html();
    };

    CandidateView.prototype.digestData = function(data) {
      if (_.isString(data.score)) {
        data.simplified_score = "";
      } else {
        data.simplified_score = Math.round(data.score);
        if (data.simplified_score > 0) {
          data.simplified_score += "+";
        }
      }
      return data;
    };

    CandidateView.prototype.render = function() {
      return CandidateView.__super__.render.call(this);
    };

    CandidateView.prototype.changeSelection = function(model, collection, info) {
      this.$el.toggleClass("selected", info.new_selected === this.model);
      return this;
    };

    CandidateView.prototype.events = {
      'click': function(event) {
        console.log(1);
        this.trigger('click', this.model, this);
        return this.model.trigger("select", this.model);
      },
      'click .mdhk': function(event) {
        var id, weights;
        id = this.model.id;
        weights = encode_weights(root.lists.agendas.getWeights());
        window.location = 'madhak.html#' + id + '//' + weights;
        return event.stopPropagation;
      }
    };

    return CandidateView;

  })(root.ListViewItem);

  root.PartyCandidateView = (function(_super) {

    __extends(PartyCandidateView, _super);

    function PartyCandidateView() {
      return PartyCandidateView.__super__.constructor.apply(this, arguments);
    }

    PartyCandidateView.prototype.get_template = function() {
      return $("#party_candidate_template").html();
    };

    return PartyCandidateView;

  })(root.CandidateView);

  root.ListView = (function(_super) {

    __extends(ListView, _super);

    function ListView() {
      this.itemEvent = __bind(this.itemEvent, this);

      this.initEmptyView = __bind(this.initEmptyView, this);

      this.addAll = __bind(this.addAll, this);

      this.addOne = __bind(this.addOne, this);
      return ListView.__super__.constructor.apply(this, arguments);
    }

    ListView.prototype.initialize = function() {
      var _base, _base1, _ref, _ref1;
      ListView.__super__.initialize.apply(this, arguments);
      if ((_ref = (_base = this.options).itemView) == null) {
        _base.itemView = root.ListViewItem;
      }
      if ((_ref1 = (_base1 = this.options).autofetch) == null) {
        _base1.autofetch = true;
      }
      if (this.options.collection) {
        return this.setCollection(this.options.collection);
      }
    };

    ListView.prototype.setCollection = function(collection) {
      this.collection = collection;
      this.collection.on("add", this.addOne);
      this.collection.on("reset", this.addAll);
      if (this.options.autofetch) {
        return this.collection.fetch();
      } else {
        return this.addAll();
      }
    };

    ListView.prototype.addOne = function(modelInstance) {
      var view;
      view = new this.options.itemView({
        model: modelInstance
      });
      view.on('all', this.itemEvent);
      return this.$el.append(view.render().$el);
    };

    ListView.prototype.addAll = function() {
      this.initEmptyView();
      return this.collection.each(this.addOne);
    };

    ListView.prototype.initEmptyView = function() {
      return this.$el.empty();
    };

    ListView.prototype.itemEvent = function() {
      return this.trigger.apply(this, arguments);
    };

    return ListView;

  })(root.TemplateView);

  root.DropdownItem = (function(_super) {

    __extends(DropdownItem, _super);

    function DropdownItem() {
      this.render = __bind(this.render, this);
      return DropdownItem.__super__.constructor.apply(this, arguments);
    }

    DropdownItem.prototype.tagName = "option";

    DropdownItem.prototype.render = function() {
      var json;
      json = this.model.toJSON();
      this.$el.html(json.name);
      this.$el.attr({
        value: json.id
      });
      return this;
    };

    return DropdownItem;

  })(Backbone.View);

  root.DropdownContainer = (function(_super) {

    __extends(DropdownContainer, _super);

    function DropdownContainer() {
      this.initEmptyView = __bind(this.initEmptyView, this);
      return DropdownContainer.__super__.constructor.apply(this, arguments);
    }

    DropdownContainer.prototype.tagName = "select";

    DropdownContainer.prototype.options = {
      itemView: root.DropdownItem,
      show_null_option: true
    };

    DropdownContainer.prototype.initEmptyView = function() {
      if (this.options.show_null_option) {
        return this.$el.html("<option>-----</option>");
      }
    };

    DropdownContainer.prototype.current = {};

    DropdownContainer.prototype.events = {
      'change': function() {
        var index;
        index = this.$el.children().index(this.$('option:selected'));
        if (this.options.show_null_option) {
          index -= 1;
        }
        this.current = index >= 0 ? this.collection.at(index) : {};
        return this.trigger('change', this.current, this.collection);
      }
    };

    return DropdownContainer;

  })(root.ListView);

  root.CurrentPartyView = (function(_super) {

    __extends(CurrentPartyView, _super);

    function CurrentPartyView() {
      this.render = __bind(this.render, this);
      return CurrentPartyView.__super__.constructor.apply(this, arguments);
    }

    CurrentPartyView.prototype.el = ".current_party";

    CurrentPartyView.prototype.render = function() {
      if (root.global.party) {
        return this.$('.current_party_logo_back').html("<img class='current_party_logo' src='" + (root.global.party.get('picture_url')) + "'/>");
      }
    };

    return CurrentPartyView;

  })(Backbone.View);

  root.CandidatesMultiView = (function(_super) {

    __extends(CandidatesMultiView, _super);

    function CandidatesMultiView() {
      this.propagate = __bind(this.propagate, this);
      return CandidatesMultiView.__super__.constructor.apply(this, arguments);
    }

    CandidatesMultiView.prototype.initialize = function() {
      var sublist, _i, _len, _ref, _results;
      _ref = this.sublists;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        sublist = _ref[_i];
        _results.push(sublist.on('all', this.propagate));
      }
      return _results;
    };

    CandidatesMultiView.prototype.propagate = function() {
      return this.trigger.apply(this, arguments);
    };

    return CandidatesMultiView;

  })(Backbone.View);

  create_delegation = function(func_name) {
    var delegate;
    delegate = function() {
      var sublist, _i, _len, _ref, _results;
      _ref = this.sublists;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        sublist = _ref[_i];
        _results.push(sublist[func_name].apply(sublist, arguments));
      }
      return _results;
    };
    return this.prototype[func_name] = delegate;
  };

  root.CandidatesMultiView.create_delegation = create_delegation;

  root.CandidatesMultiView.create_delegation('calculate');

  root.CandidatesMultiView.create_delegation('filterChange');

  root.CandidatesMainView = (function(_super) {

    __extends(CandidatesMainView, _super);

    function CandidatesMainView() {
      return CandidatesMainView.__super__.constructor.apply(this, arguments);
    }

    CandidatesMainView.prototype.el = ".candidates_container";

    CandidatesMainView.prototype.initialize = function() {
      var _this = this;
      this.sublists = [
        new root.CandidateListView({
          el: ".members",
          collection: this.options.members,
          autofetch: false
        }), new root.CandidateListView({
          el: ".newbies",
          collection: this.options.newbies,
          autofetch: false
        })
      ];
      CandidatesMainView.__super__.initialize.apply(this, arguments);
      this.currentPartyView = new root.CurrentPartyView;
      return root.global.on('change_party', function() {
        return _this.currentPartyView.render();
      });
    };

    return CandidatesMainView;

  })(root.CandidatesMultiView);

  root.PartyCandidatesView = (function(_super) {

    __extends(PartyCandidatesView, _super);

    function PartyCandidatesView() {
      return PartyCandidatesView.__super__.constructor.apply(this, arguments);
    }

    PartyCandidatesView.prototype.initialize = function() {
      this.sublists = [
        new root.PartyCandidatesListView({
          el: ".parties_activity",
          collection: this.options.activity,
          autofetch: false
        }), new root.PartyCandidatesListView({
          el: ".parties_declaration",
          collection: this.options.declarations,
          autofetch: false
        })
      ];
      return PartyCandidatesView.__super__.initialize.apply(this, arguments);
    };

    return PartyCandidatesView;

  })(root.CandidatesMultiView);

  root.PartyFilteredListView = (function(_super) {

    __extends(PartyFilteredListView, _super);

    function PartyFilteredListView() {
      this.partyChange = __bind(this.partyChange, this);
      return PartyFilteredListView.__super__.constructor.apply(this, arguments);
    }

    PartyFilteredListView.prototype.initialize = function() {
      PartyFilteredListView.__super__.initialize.apply(this, arguments);
      this.unfilteredCollection = this.collection;
      this.setCollection(new this.unfilteredCollection.constructor(void 0, {
        comparator: function(candidate) {
          return -candidate.get('score');
        }
      }));
      return root.global.on('change_party', this.partyChange);
    };

    PartyFilteredListView.prototype.filterByParty = function(party) {
      return this.unfilteredCollection.where({
        party_name: party.get('name')
      });
    };

    PartyFilteredListView.prototype.partyChangeFilter = PartyFilteredListView.prototype.filterByParty;

    PartyFilteredListView.prototype.partyChange = function(party) {
      if (!(party != null)) {
        return;
      }
      return this.collection.reset(this.partyChangeFilter(party));
    };

    return PartyFilteredListView;

  })(root.ListView);

  root.CandidateListView = (function(_super) {

    __extends(CandidateListView, _super);

    function CandidateListView() {
      this.partyChange = __bind(this.partyChange, this);
      return CandidateListView.__super__.constructor.apply(this, arguments);
    }

    CandidateListView.prototype.options = {
      itemView: root.CandidateView
    };

    CandidateListView.prototype.partyChange = function(party) {
      CandidateListView.__super__.partyChange.apply(this, arguments);
      if (!(party != null)) {
        return;
      }
      this.collection.fetchAgendas();
      return this.calculate();
    };

    CandidateListView.prototype.filterChange = function(filter_model) {
      var filtered;
      filtered = this.filterByParty(root.global.party);
      return this.collection.reset(_.filter(filtered, filter_model.get('func')));
    };

    CandidateListView.prototype.calculate = function() {
      var _this = this;
      if (!this.collection.agendas_fetching) {
        throw "Agenda data not present yet";
      }
      return this.collection.agendas_fetching.done(function() {
        _this.calculate_inner();
        return _this.collection.sort();
      });
    };

    CandidateListView.prototype.getCandidateAgendas = function(candidate) {
      return candidate.getAgendas();
    };

    CandidateListView.prototype.calculate_inner = function() {
      var abs_sum, weight_sum, weights,
        _this = this;
      weights = root.lists.agendas.getWeights();
      abs_sum = function(arr) {
        var do_sum;
        do_sum = function(memo, item) {
          return memo += Math.abs(item);
        };
        return _.reduce(arr, do_sum, 0);
      };
      weight_sum = abs_sum(weights);
      if (!weight_sum) {
        return;
      }
      console.log("Weights: ", weights, weight_sum);
      return this.collection.each(function(candidate) {
        if (!candidate.get('is_placeholder')) {
          return candidate.set('score', _.reduce(_this.getCandidateAgendas(candidate), function(memo, score, id) {
            return memo += (weights[id] || 0) * score / weight_sum;
          }, 0));
        }
      });
    };

    return CandidateListView;

  })(root.PartyFilteredListView);

  root.PartyCandidatesListView = (function(_super) {

    __extends(PartyCandidatesListView, _super);

    function PartyCandidatesListView() {
      this.partyChange = __bind(this.partyChange, this);
      return PartyCandidatesListView.__super__.constructor.apply(this, arguments);
    }

    PartyCandidatesListView.prototype.el = ".party_candidates_container .parties";

    PartyCandidatesListView.prototype.options = {
      itemView: root.PartyCandidateView
    };

    PartyCandidatesListView.prototype.initialize = function() {
      return PartyCandidatesListView.__super__.initialize.apply(this, arguments);
    };

    PartyCandidatesListView.prototype.partyChange = function(party) {
      return this.collection.reset(this.unfilteredCollection.models);
    };

    return PartyCandidatesListView;

  })(root.CandidateListView);

  root.AgendaListView = (function(_super) {

    __extends(AgendaListView, _super);

    function AgendaListView() {
      this.changeModel = __bind(this.changeModel, this);
      return AgendaListView.__super__.constructor.apply(this, arguments);
    }

    AgendaListView.prototype.el = '.agendas';

    AgendaListView.prototype.options = {
      itemView: (function(_super1) {

        __extends(_Class, _super1);

        function _Class() {
          this.onStop = __bind(this.onStop, this);
          return _Class.__super__.constructor.apply(this, arguments);
        }

        _Class.prototype.className = "agenda_item";

        _Class.prototype.render = function() {
          _Class.__super__.render.call(this);
          this.$('.slider').agendaSlider({
            min: -100,
            max: 100,
            value: this.model.get("uservalue"),
            stop: this.onStop
          });
          return this;
        };

        _Class.prototype.onStop = function(event, ui) {
          if (ui.value <= 5 && ui.value >= -5) {
            $(ui.handle).closest('.slider').agendaSlider("value", 0);
            ui.value = 0;
          }
          return this.model.set({
            uservalue: ui.value
          });
        };

        _Class.prototype.get_template = function() {
          return $("#agenda_template").html();
        };

        return _Class;

      })(root.ListViewItem)
    };

    AgendaListView.prototype.initialize = function() {
      AgendaListView.__super__.initialize.apply(this, arguments);
      return this.collection.on('change', this.changeModel);
    };

    AgendaListView.prototype.changeModel = function(model) {
      return this.$(".slider").eq(this.collection.indexOf(model)).agendaSlider("value", model.get("uservalue"));
    };

    AgendaListView.prototype.showMarkersForCandidate = function(candidate_model) {
      var candidate_agendas;
      candidate_agendas = candidate_model.getAgendas();
      return this.collection.each(function(agenda, index) {
        var value;
        value = candidate_agendas[agenda.id] || 0;
        value = 50 + value / 2;
        return this.$(".slider").eq(index).agendaSlider("setCandidateMarker", value);
      });
    };

    AgendaListView.prototype.clearMarkers = function() {
      return this.collection.each(function(agenda, index) {
        return this.$(".slider").eq(index).agendaSlider("clearCandidateMarker");
      });
    };

    return AgendaListView;

  }).call(this, root.ListView);

  root.RecommendationsItemView = (function(_super) {

    __extends(RecommendationsItemView, _super);

    function RecommendationsItemView() {
      return RecommendationsItemView.__super__.constructor.apply(this, arguments);
    }

    RecommendationsItemView.prototype.initialize = function() {
      var _this = this;
      RecommendationsItemView.__super__.initialize.apply(this, arguments);
      this.model.on('selected', function() {
        return _this.$('.recommendation_item').addClass('selected');
      });
      return this.model.on('deselected', function() {
        return _this.$('.recommendation_item').removeClass('selected');
      });
    };

    RecommendationsItemView.prototype.events = {
      'click .recommendation_item': function() {
        return this.model.trigger('select', this.model);
      }
    };

    RecommendationsItemView.prototype.get_template = function() {
      return $("#recommendation_template").html();
    };

    RecommendationsItemView.prototype.digestData = function(data) {
      return _.extend({}, data, {
        model: this.model
      });
    };

    return RecommendationsItemView;

  })(root.ListViewItem);

  root.RecommendationsView = (function(_super) {

    __extends(RecommendationsView, _super);

    function RecommendationsView() {
      return RecommendationsView.__super__.constructor.apply(this, arguments);
    }

    RecommendationsView.prototype.el = '.recommendations';

    RecommendationsView.prototype.options = {
      itemView: root.RecommendationsItemView
    };

    RecommendationsView.prototype.initialize = function() {
      RecommendationsView.__super__.initialize.apply(this, arguments);
      return this.collection.on('selected_change', this.applyChange, this);
    };

    RecommendationsView.prototype.partyChangeFilter = function(party) {
      return RecommendationsView.__super__.partyChangeFilter.call(this, party).concat(this.unfilteredCollection.where({
        party_name: void 0
      }));
    };

    RecommendationsView.prototype.applyChange = function(recommendation, collection) {
      var changeModelFunc, is_selected, weights;
      is_selected = recommendation === collection.getSelected();
      changeModelFunc = function(candidates, attribute) {
        return function(model_id, status) {
          var list, model;
          model = candidates.get(model_id);
          list = _.clone(model.get(attribute));
          if (is_selected) {
            list[recommendation.id] = true;
          } else {
            delete list[recommendation.id];
          }
          return model.set(attribute, list);
        };
      };
      _.each(recommendation.get('positive_list')['members'], changeModelFunc(this.options.members, 'recommendation_positive'));
      _.each(recommendation.get('negative_list')['members'], changeModelFunc(this.options.members, 'recommendation_negative'));
      _.each(recommendation.get('positive_list')['newbies'], changeModelFunc(this.options.newbies, 'recommendation_positive'));
      _.each(recommendation.get('negative_list')['newbies'], changeModelFunc(this.options.newbies, 'recommendation_negative'));
      if (is_selected && (weights = recommendation.get('agendas'))) {
        if (_.isString(weights)) {
          weights = parse_weights(weights);
        }
        root.lists.agendas.resetWeights(weights);
      }
      return ga.event('recommendation', "party_" + root.global.party.id + "_recommendation_" + recommendation.id, "" + (recommendation.get('status')));
    };

    return RecommendationsView;

  })(root.PartyFilteredListView);

  filter_data = [
    {
      id: "all",
      name: "All",
      func: function(obj) {
        return true;
      }
    }, {
      id: "district",
      name: "District",
      func: function(obj) {
        return obj.get('district') === root.global.district.get('id');
      }
    }
  ];

  root.FilterView = (function(_super) {

    __extends(FilterView, _super);

    function FilterView() {
      return FilterView.__super__.constructor.apply(this, arguments);
    }

    FilterView.prototype.el = '.filtering';

    FilterView.prototype.options = _.extend({}, FilterView.__super__.options, {
      collection: new Backbone.Collection(filter_data),
      autofetch: false,
      show_null_option: false
    });

    return FilterView;

  })(root.DropdownContainer);

  root.EntranceView = (function(_super) {

    __extends(EntranceView, _super);

    function EntranceView() {
      this.initialize = __bind(this.initialize, this);
      return EntranceView.__super__.constructor.apply(this, arguments);
    }

    EntranceView.prototype.el = '.entrance_page';

    EntranceView.prototype.initialize = function() {
      var _this = this;
      this.partyListView = new root.DropdownContainer({
        el: '.parties_choose',
        collection: root.lists.parties,
        autofetch: false
      });
      this.partyListView.on('change', function(model) {
        return console.log("Party changed: ", _this, arguments);
      });
      this.districtListView = new root.DropdownContainer({
        el: '.districts',
        collection: new Backbone.Collection,
        autofetch: false
      });
      this.districtListView.on('change', function(model) {
        return root.global.district = model;
      });
      this.$el.on('click', '#party_selected', function() {
        var district, party, _ref;
        _ref = [_this.partyListView.current, _this.districtListView.current], party = _ref[0], district = _ref[1];
        if (!((party != null ? party.id : void 0) != null)) {
          return;
        }
        if (district.id) {
          ga.event('party', 'choose', "party_" + party.id + "_district_" + district.id);
        } else {
          ga.event('party', 'choose', "party_" + party.id);
        }
        return root.router.navigate(party.id.toString(), {
          trigger: true
        });
      });
      return this.partyListView.on('change', function(party) {
        var district, districts, districts_names, _i, _len;
        districts_names = _.chain(_.union(root.lists.members.where({
          party_name: party.get('name')
        }), root.lists.newbies.where({
          party_name: party.get('name')
        }))).pluck('attributes').pluck('district').uniq().value();
        districts = [];
        for (_i = 0, _len = districts_names.length; _i < _len; _i++) {
          district = districts_names[_i];
          if (!district) {
            continue;
          }
          districts.push({
            id: district,
            name: district
          });
        }
        return _this.districtListView.collection.reset(districts);
      });
    };

    return EntranceView;

  })(Backbone.View);

  root.AppView = (function(_super) {

    __extends(AppView, _super);

    function AppView() {
      this.updateSelectedCandidate = __bind(this.updateSelectedCandidate, this);

      this.calculate = __bind(this.calculate, this);

      this.initialize = __bind(this.initialize, this);
      return AppView.__super__.constructor.apply(this, arguments);
    }

    AppView.prototype.el = '#app_root';

    AppView.prototype.initialize = function() {
      this.agendaListView = new root.AgendaListView({
        collection: root.lists.agendas
      });
      this.candidatesView = new root.CandidatesMainView({
        members: root.lists.members,
        newbies: root.lists.newbies
      });
      this.partyCandidatesView = new root.PartyCandidatesView({
        activity: root.lists.parties,
        declarations: root.lists.party_declarations
      });
      this.recommendations = new root.RecommendationList;
      this.recommendationsView = new root.RecommendationsView({
        collection: this.recommendations,
        members: root.lists.members,
        newbies: root.lists.newbies
      });
      root.lists.agendas.on('change:uservalue', _.debounce(this.calculate, 500));
      this.candidates = this.multiSelectedSetup([root.lists.members, root.lists.newbies, root.lists.parties, root.lists.party_declarations]);
      return this.candidates.on('selected_change', this.updateSelectedCandidate);
    };

    AppView.prototype.multiSelectedSetup = function(collections) {
      var create_delegate, delegator, updateSelected;
      updateSelected = function(changed_collection, options) {
        var collection, _i, _len, _results;
        if (!options.new_selected) {
          return;
        }
        _results = [];
        for (_i = 0, _len = collections.length; _i < _len; _i++) {
          collection = collections[_i];
          if (collection !== changed_collection) {
            _results.push(collection.trigger('select', void 0, collection));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };
      create_delegate = function() {
        var func_names, object;
        object = arguments[0], func_names = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        return _.each(func_names, function(func_name) {
          return object[func_name] = function() {
            var args, collect, collection, new_args, _i, _len;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            collect = [];
            for (_i = 0, _len = collections.length; _i < _len; _i++) {
              collection = collections[_i];
              new_args = _.map(args, function(item) {
                if (item === "REPLACE_COLLECTION") {
                  return collection;
                } else {
                  return item;
                }
              });
              collect.push(collection[func_name].apply(collection, new_args));
            }
            return collect;
          };
        });
      };
      create_delegate((delegator = {}), 'on', 'trigger');
      delegator.getSelected = function() {
        var args, collection, selected, _i, _len;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        for (_i = 0, _len = collections.length; _i < _len; _i++) {
          collection = collections[_i];
          if (selected = collection.getSelected()) {
            return selected;
          }
        }
        return void 0;
      };
      delegator.on('selected_change', updateSelected);
      return delegator;
    };

    AppView.prototype.events = {
      'click .fb_share': function(event) {
        return root.facebookShare(getShareLink(root.lists.agendas.getWeights()));
      },
      'click .tweet_share': function(event) {
        return root.twitterShare(getShareLink(root.lists.agendas.getWeights()));
      },
      'click .print': function(event) {
        ga.event('print', "party_" + root.global.party.id);
        $('.page_top_bar').add('.agendas_container').add('.main_top').hide();
        window.print();
        return $('.page_top_bar').add('.agendas_container').add('.main_top').show();
      },
      'click input:button#show_weights': function(event) {
        var instructions;
        instructions = "להעתקה לחץ על צירוף המקשים\nCtrl+C";
        return window.prompt(instructions, encode_weights(root.lists.agendas.getWeights()));
      },
      'click #change_party': function(event) {
        this.candidates.trigger('select', void 0, "REPLACE_COLLECTION");
        return root.router.navigate('', {
          trigger: true
        });
      }
    };

    AppView.prototype.getSelected = function() {
      return root.lists.members.getSelected() || root.lists.newbies.getSelected();
    };

    AppView.prototype.calculate = function(agenda) {
      var event_category;
      if (root.router.mode === root.router.MODE_PARTIES) {
        this.partyCandidatesView.calculate();
        event_category = 'change';
      } else {
        this.candidatesView.calculate();
        event_category = 'change_party_' + root.global.party.id;
      }
      return ga.event('weight', event_category, 'agenda_' + agenda.id, agenda.get('uservalue'));
    };

    AppView.prototype.updateSelectedCandidate = function(collection, options) {
      var is_party, is_party_declaration, type;
      if (!options.new_selected) {
        this.agendaListView.clearMarkers();
        return;
      }
      this.agendaListView.showMarkersForCandidate(options.new_selected);
      is_party = options.new_selected instanceof root.Party;
      is_party_declaration = options.new_selected instanceof root.PartyDeclaration;
      if (is_party || is_party_declaration) {
        type = is_party ? "activity" : "declaration";
        ga.event('candidates', "select", "party_" + type + "_" + options.new_selected.id);
        return;
      }
      type = options.new_selected instanceof root.Member ? 'member' : 'newbie';
      return ga.event('candidates', "select_party_" + root.global.party.id, "" + type + "_" + options.new_selected.id);
    };

    return AppView;

  })(Backbone.View);

  root.Router = (function(_super) {

    __extends(Router, _super);

    function Router() {
      return Router.__super__.constructor.apply(this, arguments);
    }

    Router.prototype.MODE_ENTRANCE = 1;

    Router.prototype.MODE_MEMBERS = 2;

    Router.prototype.MODE_PARTIES = 3;

    Router.prototype.routes = {
      '': 'parties',
      'parties': 'parties',
      ':weights': 'parties'
    };

    Router.prototype.entrance = function() {
      console.log('entrance');
      return this.setMode(this.MODE_ENTRANCE);
    };

    Router.prototype.setMode = function(mode) {
      $('.entrance_page').toggle(mode === this.MODE_ENTRANCE);
      $('.party_page').toggle(mode !== this.MODE_ENTRANCE);
      $('.party_candidates_container').toggle(mode === this.MODE_PARTIES);
      $('.candidates_container').toggle(mode === this.MODE_MEMBERS);
      return this.mode = mode;
    };

    Router.prototype.parties = function(weights) {
      if (weights = parse_weights(weights)) {
        root.lists.agendas.resetWeights(weights);
      }
      root.global.trigger('change_party', void 0);
      return this.setMode(this.MODE_PARTIES);
    };

    return Router;

  })(Backbone.Router);

  setupPartyList = function() {
    var _ref;
    if ((_ref = root.lists) == null) {
      root.lists = {};
    }
    root.lists.agendas = new root.AgendaList;
    root.lists.parties = new root.PartyList;
    root.lists.party_declarations = new root.PartyDeclarationList;
    root.lists.members = new root.MemberList;
    root.lists.newbies = new root.NewbiesList;
    return [root.lists.agendas.fetch(), root.lists.parties.fetch(), root.lists.party_declarations.fetch(), root.lists.members.fetch(), root.lists.newbies.fetch()];
  };

  $(function() {
    var partyListFetching;
    root.global = _.extend({}, Backbone.Events);
    root.router = new root.Router;
    partyListFetching = setupPartyList();
    root.appView = new root.AppView;
    root.entranceView = new root.EntranceView;
    $.when.apply($, partyListFetching).done(function() {
      Backbone.history.start();
      $('#loading').hide();
      return $('#app_root').show();
    }).fail(function() {
      $('#loading').text('הורדת נתונים מהשרת נכשלה... נסיון נוסף עוד מספר שניות');
      return setTimeout(function() {
        return window.location.reload();
      }, 6 * 1000);
    });
    if (window.location.protocol !== "file:") {
      FB.init({
        appId: 102113249964274
      });
      FB.Event.subscribe('message.send', function(targetUrl) {
        return ga.social('facebook', 'send', targetUrl);
      });
      FB.XFBML.parse();
    }
  });

}).call(this);
